import java.util.*;
// sherleen's


class HuffmanNode {
    int frequency;   
    char character;  
    HuffmanNode left;  // child kiri
    HuffmanNode right; // child kanan

    // Constructor bwt bikin simpul baru
    HuffmanNode(char character, int frequency) {
        this.character = character;
        this.frequency = frequency;
        this.left = null;
        this.right = null;
    }
}

// comparator buat urutin node berdasarkan frekuensi (PENTINGGG bwt PriorityQueue)
class NodeComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.frequency - y.frequency; //frekuensi kecil di depan
    }
}

public class HuffmanCompression {

    public static void buildHuffmanCode(HuffmanNode root, String code, Map<Character, String> huffmanCode) {
        if (root == null) {
            return; //klo udah mentok
        }

        //klo node ini adalah daun (punya karakter), tambahin ke map
        if (root.left == null && root.right == null) {
            huffmanCode.put(root.character, code);
        }

        // rekurs ke anak kiri (tambah '0') and kanan (tambah '1')
        buildHuffmanCode(root.left, code + "0", huffmanCode);
        buildHuffmanCode(root.right, code + "1", huffmanCode);
    }

    public static void main(String[] args) {
        // String yg mw dikompres
        String input = "sherleen";

        //ngitung frekuensi tiap karakter
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : input.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        // PriorityQueue bwt bikin hhuffman tree
        PriorityQueue<HuffmanNode> priorityQueue = new PriorityQueue<>(new NodeComparator());

        // mbikin node untuk setiap karakter n frekuensi, masukin ke queue
        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
            priorityQueue.add(new HuffmanNode(entry.getKey(), entry.getValue()));
        }

        // mbangun huffman tree
        while (priorityQueue.size() > 1) {
            // ngambill 2 node dgn frekuensi paling kecil
            HuffmanNode left = priorityQueue.poll();
            HuffmanNode right = priorityQueue.poll();

            // gabungin mereka jadi node baru (frekuensi = jumlah dua node)
            HuffmanNode newNode = new HuffmanNode('-', left.frequency + right.frequency);
            newNode.left = left;
            newNode.right = right;

            // input node baru ke queue
            priorityQueue.add(newNode);
        }

        HuffmanNode root = priorityQueue.poll();

        Map<Character, String> huffmanCode = new HashMap<>();
        buildHuffmanCode(root, "", huffmanCode);

        System.out.println("Huffman Codes: " + huffmanCode);

        // Encode string input ke  Huffman code
        StringBuilder encodedString = new StringBuilder();
        for (char c : input.toCharArray()) {
            encodedString.append(huffmanCode.get(c));
        }

        System.out.println("Encoded String: " + encodedString);

        //  encoded string -->> byte array
        byte[] huffCodeBytes = encodedString.toString().getBytes();

        System.out.println("Compressed Bytes: " + Arrays.toString(huffCodeBytes));

        System.out.println("Original Bytes: " + Arrays.toString(input.getBytes()));

        System.out.println("Compression Ratio: " + (double) huffCodeBytes.length / input.getBytes().length);
    }
}
